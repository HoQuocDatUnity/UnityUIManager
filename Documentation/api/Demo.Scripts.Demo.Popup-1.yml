### YamlMime:ManagedReference
items:
- uid: Demo.Scripts.Demo.Popup`1
  commentId: T:Demo.Scripts.Demo.Popup`1
  id: Popup`1
  parent: Demo.Scripts.Demo
  children:
  - Demo.Scripts.Demo.Popup`1.#ctor(`0)
  - Demo.Scripts.Demo.Popup`1.Property
  langs:
  - csharp
  - vb
  name: Popup<T>
  nameWithType: Popup<T>
  fullName: Demo.Scripts.Demo.Popup<T>
  type: Class
  source:
    id: Popup
    path: ''
    startLine: 1033
  assemblies:
  - cs.temp.dll
  namespace: Demo.Scripts.Demo
  syntax:
    content: 'public class Popup<T> where T : PopupProperty'
    typeParameters:
    - id: T
    content.vb: Public Class Popup(Of T As PopupProperty)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Popup(Of T)
  fullName.vb: Demo.Scripts.Demo.Popup(Of T)
  name.vb: Popup(Of T)
- uid: Demo.Scripts.Demo.Popup`1.Property
  commentId: P:Demo.Scripts.Demo.Popup`1.Property
  id: Property
  parent: Demo.Scripts.Demo.Popup`1
  langs:
  - csharp
  - vb
  name: Property
  nameWithType: Popup<T>.Property
  fullName: Demo.Scripts.Demo.Popup<T>.Property
  type: Property
  source:
    id: Property
    path: ''
    startLine: 1035
  assemblies:
  - cs.temp.dll
  namespace: Demo.Scripts.Demo
  syntax:
    content: public T Property { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property [Property] As T
  overload: Demo.Scripts.Demo.Popup`1.Property*
  nameWithType.vb: Popup(Of T).Property
  fullName.vb: Demo.Scripts.Demo.Popup(Of T).Property
- uid: Demo.Scripts.Demo.Popup`1.#ctor(`0)
  commentId: M:Demo.Scripts.Demo.Popup`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Demo.Scripts.Demo.Popup`1
  langs:
  - csharp
  - vb
  name: Popup(T)
  nameWithType: Popup<T>.Popup(T)
  fullName: Demo.Scripts.Demo.Popup<T>.Popup(T)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1037
  assemblies:
  - cs.temp.dll
  namespace: Demo.Scripts.Demo
  syntax:
    content: public Popup(T property)
    parameters:
    - id: property
      type: '{T}'
    content.vb: Public Sub New([property] As T)
  overload: Demo.Scripts.Demo.Popup`1.#ctor*
  nameWithType.vb: Popup(Of T).New(T)
  fullName.vb: Demo.Scripts.Demo.Popup(Of T).New(T)
  name.vb: New(T)
references:
- uid: Demo.Scripts.Demo
  commentId: N:Demo.Scripts.Demo
  name: Demo.Scripts.Demo
  nameWithType: Demo.Scripts.Demo
  fullName: Demo.Scripts.Demo
  spec.csharp:
  - uid: Demo
    name: Demo
  - name: .
  - uid: Demo.Scripts
    name: Scripts
  - name: .
  - uid: Demo.Scripts.Demo
    name: Demo
  spec.vb:
  - uid: Demo
    name: Demo
  - name: .
  - uid: Demo.Scripts
    name: Scripts
  - name: .
  - uid: Demo.Scripts.Demo
    name: Demo
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Demo.Scripts.Demo.Popup`1.Property*
  commentId: Overload:Demo.Scripts.Demo.Popup`1.Property
  name: Property
  nameWithType: Popup<T>.Property
  fullName: Demo.Scripts.Demo.Popup<T>.Property
  nameWithType.vb: Popup(Of T).Property
  fullName.vb: Demo.Scripts.Demo.Popup(Of T).Property
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Demo.Scripts.Demo.Popup`1.#ctor*
  commentId: Overload:Demo.Scripts.Demo.Popup`1.#ctor
  name: Popup
  nameWithType: Popup<T>.Popup
  fullName: Demo.Scripts.Demo.Popup<T>.Popup
  nameWithType.vb: Popup(Of T).New
  fullName.vb: Demo.Scripts.Demo.Popup(Of T).New
  name.vb: New
