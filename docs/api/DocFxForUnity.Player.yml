### YamlMime:ManagedReference
items:
- uid: DocFxForUnity.Player
  commentId: T:DocFxForUnity.Player
  id: Player
  parent: DocFxForUnity
  children:
  - DocFxForUnity.Player.Equipment
  - DocFxForUnity.Player.Health
  - DocFxForUnity.Player.Hit(System.Int32)
  - DocFxForUnity.Player.HurtClip
  - DocFxForUnity.Player.Start
  - DocFxForUnity.Player.StartingHealth
  langs:
  - csharp
  - vb
  name: Player
  nameWithType: Player
  fullName: DocFxForUnity.Player
  type: Class
  source:
    id: Player
    path: ''
    startLine: 8
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nThe player of the game.\n"
  example: []
  syntax:
    content: 'public class Player : MonoBehaviour'
    content.vb: Public Class Player Inherits MonoBehaviour
  inheritance:
  - System.Object
- uid: DocFxForUnity.Player.Equipment
  commentId: P:DocFxForUnity.Player.Equipment
  id: Equipment
  parent: DocFxForUnity.Player
  langs:
  - csharp
  - vb
  name: Equipment
  nameWithType: Player.Equipment
  fullName: DocFxForUnity.Player.Equipment
  type: Property
  source:
    id: Equipment
    path: ''
    startLine: 25
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nGets the list of the equipment carried by the player.\n"
  example: []
  syntax:
    content: public List<string> Equipment { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property Equipment As List(Of String)
  overload: DocFxForUnity.Player.Equipment*
- uid: DocFxForUnity.Player.Health
  commentId: P:DocFxForUnity.Player.Health
  id: Health
  parent: DocFxForUnity.Player
  langs:
  - csharp
  - vb
  name: Health
  nameWithType: Player.Health
  fullName: DocFxForUnity.Player.Health
  type: Property
  source:
    id: Health
    path: ''
    startLine: 30
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nGets the current health of the player.\n"
  example: []
  syntax:
    content: public int Health { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Health As Integer
  overload: DocFxForUnity.Player.Health*
- uid: DocFxForUnity.Player.HurtClip
  commentId: P:DocFxForUnity.Player.HurtClip
  id: HurtClip
  parent: DocFxForUnity.Player
  langs:
  - csharp
  - vb
  name: HurtClip
  nameWithType: Player.HurtClip
  fullName: DocFxForUnity.Player.HurtClip
  type: Property
  source:
    id: HurtClip
    path: ''
    startLine: 35
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nGets the <see cref=\"!:AudioClip\"></see> that will be played when <xref href=\"DocFxForUnity.Player.Hit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public AudioClip HurtClip { get; }
    parameters: []
    return:
      type: Global.AudioClip
    content.vb: Public ReadOnly Property HurtClip As AudioClip
  overload: DocFxForUnity.Player.HurtClip*
- uid: DocFxForUnity.Player.StartingHealth
  commentId: P:DocFxForUnity.Player.StartingHealth
  id: StartingHealth
  parent: DocFxForUnity.Player
  langs:
  - csharp
  - vb
  name: StartingHealth
  nameWithType: Player.StartingHealth
  fullName: DocFxForUnity.Player.StartingHealth
  type: Property
  source:
    id: StartingHealth
    path: ''
    startLine: 40
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nGets the starting health of the player.\n"
  example: []
  syntax:
    content: public int StartingHealth { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property StartingHealth As Integer
  overload: DocFxForUnity.Player.StartingHealth*
- uid: DocFxForUnity.Player.Start
  commentId: M:DocFxForUnity.Player.Start
  id: Start
  parent: DocFxForUnity.Player
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Player.Start()
  fullName: DocFxForUnity.Player.Start()
  type: Method
  source:
    id: Start
    path: ''
    startLine: 45
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nSets <xref href=\"DocFxForUnity.Player.Health\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"DocFxForUnity.Player.StartingHealth\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual void Start()
    content.vb: Protected Overridable Sub Start()
  overload: DocFxForUnity.Player.Start*
- uid: DocFxForUnity.Player.Hit(System.Int32)
  commentId: M:DocFxForUnity.Player.Hit(System.Int32)
  id: Hit(System.Int32)
  parent: DocFxForUnity.Player
  langs:
  - csharp
  - vb
  name: Hit(int)
  nameWithType: Player.Hit(int)
  fullName: DocFxForUnity.Player.Hit(int)
  type: Method
  source:
    id: Hit
    path: ''
    startLine: 55
  assemblies:
  - cs.temp.dll
  namespace: DocFxForUnity
  summary: "\nDeacreases <xref href=\"DocFxForUnity.Player.Health\" data-throw-if-not-resolved=\"false\"></xref> by a specified value and display a game over if <xref href=\"DocFxForUnity.Player.Health\" data-throw-if-not-resolved=\"false\"></xref> drops\nto zero.\n"
  example: []
  syntax:
    content: public void Hit(int value)
    parameters:
    - id: value
      type: System.Int32
      description: How much to deacrease <xref href="DocFxForUnity.Player.Health" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Hit(value As Integer)
  overload: DocFxForUnity.Player.Hit*
  nameWithType.vb: Player.Hit(Integer)
  fullName.vb: DocFxForUnity.Player.Hit(Integer)
  name.vb: Hit(Integer)
references:
- uid: DocFxForUnity
  commentId: N:DocFxForUnity
  name: DocFxForUnity
  nameWithType: DocFxForUnity
  fullName: DocFxForUnity
- uid: DocFxForUnity.Player.Equipment*
  commentId: Overload:DocFxForUnity.Player.Equipment
  name: Equipment
  nameWithType: Player.Equipment
  fullName: DocFxForUnity.Player.Equipment
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: DocFxForUnity.Player.Health*
  commentId: Overload:DocFxForUnity.Player.Health
  name: Health
  nameWithType: Player.Health
  fullName: DocFxForUnity.Player.Health
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DocFxForUnity.Player.Hit(System.Int32)
  commentId: M:DocFxForUnity.Player.Hit(System.Int32)
  isExternal: true
- uid: DocFxForUnity.Player.HurtClip*
  commentId: Overload:DocFxForUnity.Player.HurtClip
  name: HurtClip
  nameWithType: Player.HurtClip
  fullName: DocFxForUnity.Player.HurtClip
- uid: Global.AudioClip
  commentId: '!:Global.AudioClip'
  isExternal: true
  name: AudioClip
  nameWithType: AudioClip
  fullName: AudioClip
- uid: DocFxForUnity.Player.StartingHealth*
  commentId: Overload:DocFxForUnity.Player.StartingHealth
  name: StartingHealth
  nameWithType: Player.StartingHealth
  fullName: DocFxForUnity.Player.StartingHealth
- uid: DocFxForUnity.Player.Health
  commentId: P:DocFxForUnity.Player.Health
  isExternal: true
- uid: DocFxForUnity.Player.StartingHealth
  commentId: P:DocFxForUnity.Player.StartingHealth
  isExternal: true
- uid: DocFxForUnity.Player.Start*
  commentId: Overload:DocFxForUnity.Player.Start
  name: Start
  nameWithType: Player.Start
  fullName: DocFxForUnity.Player.Start
- uid: DocFxForUnity.Player.Hit*
  commentId: Overload:DocFxForUnity.Player.Hit
  name: Hit
  nameWithType: Player.Hit
  fullName: DocFxForUnity.Player.Hit
